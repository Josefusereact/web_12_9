<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>01_js数组冒泡</title>
</head>

<body>
    <div id="app"> </div>

</body>
<script text="text/javascript">
    // 无法整除7的数之和
    // let sum = 0;
    // for (let i = 1; i <= 100; i++) {
    //     if (i % 7 == 0) {
    //         continue
    //     }
    //     sum += i;
    // }
    // console.log(sum);//4315


    // 除3非0之和且输出第一个>2000的数
    // 第一种数组方式
    // let sum = 0;
    // let arr = [];
    // let brr = [];
    // for (let i = 0; i < 100; i++) {
    //     if (i % 3 !== 0) {
    //         sum += i;
    //     }
    //     arr[i] = sum;
    //     for (var j = 0; j < arr.length; j++) {
    //         if (arr[j] > 2000) {
    //             arr[i] = arr[j]
    //             for (var k = 0; k < 1; k++) {
    //                 brr[k] = arr[i];
    //             }
    //         }
    //     }
    // }
    // console.log(brr[0]);
    // alert(brr[0]);
    // 第二种break中断
    // var sum = 0;
    // for (var i = 0; i < 100; i++) {
    //     if (i % 3 != 0) {
    //         sum += i;
    //         if (sum >= 2000) {
    //             console.log(sum);
    //             break
    //         }
    //     }
    // }


    // 冒泡排序
    // var arr = [5, 7, 6, 85, 51, 4];
    // for (var j = 0; j < arr.length - 1; j++) {
    //     for (var i = 0; i < arr.length - 1 - j; i++) {
    //         if (arr[i] > arr[i + 1]) {
    //             var temp = arr[i];
    //             arr[i] = arr[i + 1];
    //             arr[i + 1] = temp;
    //         }
    //         console.log(arr);
    //     }
    //     console.log("************************");
    // }


    // 求阶乘之和
    // var fac = prompt('enter num:');
    // function factorial(fac) {
    //     var sum = 0;
    //     var product = 1;
    //     for (var i = 1; i <= fac; i++) {
    //         product *= i;
    //         sum += product;
    //     }
    //     return sum;
    // }
    // var ads = factorial(fac);
    // alert(ads);


    //求200-300之间所有奇数的和
    // var uneven = 0;
    // for (var i = 200; i <= 300; i++) {
    //     if (i % 2 == 0) {
    //         continue
    //     }
    //     uneven += i;
    // }
    // console.log(uneven);


    //求200-300之间第一个能被7整除的数
    // var divide = 0;
    // for (var i = 200; i <= 300; i++) {
    //     if (i % 7 == 0) {
    //         divide = i;
    //         console.log(divide);
    //         break
    //     }
    // }

    // 把1-10之间所有的奇数，放到数组中
    // var uneven = 0;
    // var arr = [];
    // for (var i = 0; i < 10; i++) {
    //     if (i % 2 != 0) {
    //         arr[uneven] = i;
    //         uneven++;
    //     }
    // }
    // console.log(arr);


    // 1-10之间能被3整数的数字，存到数组中
    // var arr = [];
    // var divide3 = 0;
    // for (var i = 0; i < 10; i++) {
    //     if (i % 3 == 0) {
    //         arr[divide3] = i
    //         divide3++;
    //     }
    // }
    // console.log(arr);


    // 求一组数中的所有数的和和平均值
    // var arr = [13, 15, 46, 789, 456, 12, 95, 89, 89, 48, 45, 12, 70, 12, 35];
    // var sum = 0;
    // var average = 0;
    // for (var i = 0; i < arr.length; i++) {
    //     sum += arr[i];
    // }
    // average = sum / arr.length;
    // console.log(sum);
    // console.log(average);


    // 求一组数中的最大值和最小值，以及所在位置
    // 第一种偷懒
    // var arr = [100, 99, 85, 75, 224, 545, 24, 30, 72, 21, 10];
    // console.log(arr);
    // console.log('**************************');
    // for (var i = 0; i < arr.length - 1; i++) {
    //     for (var j = 0; j < arr.length - 1 - i; j++) {
    //         if (arr[j] > arr[j + 1]) {
    //             var temp = arr[j];
    //             arr[j] = arr[j + 1];
    //             arr[j + 1] = temp;
    //             var min = arr[0];
    //             var max = arr[arr.length - 1];
    //             var maxIndex = 0;
    //             var minIndex = arr.length - 1;
    //         }
    //         console.log(arr);
    //     }
    //     console.log('**************************');
    // }
    // console.log('最小值：' + min);
    // console.log('最大值：' + max);
    // console.log('最小值数组下标：' + maxIndex);
    // console.log('最大值数组下标：' + minIndex);
    // 第二种未排序判断最大值最小值
    // var arr = [100, 99, 85, 75, 224, 545, 24, 30, 72, 21, 10];
    // var max = arr[0];
    // var min = arr[0];
    // for (var i = 0; i < arr.length; i++) {
    //     if (arr[i] > max) {
    //         max = arr[i];
    //         var maxIndex = i;
    //     }
    //     if (arr[i] < min) {
    //         min = arr[i];
    //         var minIndex = i;
    //     }
    // }
    // console.log(min);
    // console.log(max);
    // console.log(minIndex);
    // console.log(maxIndex);


    // 将字符串数组用|或其他符号分割
    // var arr = ["John", "Kirito", "Asuna"];
    // var brr = arr[0];
    // for (let i = 1; i < arr.length; i++) {
    //     brr += "|" + arr[i];
    // }
    // console.log(brr);


    // 将数组中值为0的去掉，不为0的存入一个新数组
    // var arr = [78, 0, 56, 0, 99, 0, 0, 65, 55, 0, 0, 23, 12, 0, 22, 21];
    // var brr = [];
    // for (var i = 0; i < arr.length; i++) {
    //     if (arr[i] !== 0) {
    //         brr[brr.length] = arr[i];
    //     }
    // }
    // console.log(brr);


    // 翻转数组
    // var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];
    // for (var i = 0; i < arr.length/2; i++) {
    //     var temp = arr[i];
    //     arr[i] = arr[arr.length - i - 1];
    //     arr[arr.length - i - 1] = temp;
    // }
    // console.log(arr);


    //12.求斐波那契数列中的第n个数是多少？
    // var n = prompt("波那契数列的n个数");
    // function fn(n) {
    //     vara = 1;//varb=1；
    //     for (var i = 3; i <= n; i++) {
    //         a = a + b;//235//b=a-b；//123
    //     }
    //     return a;
    // }
    // console.Log(fn(n));


    // 13.输入某年某月某日，判断这一天是这一年的第几天？（闰年）
    // 2000/03/15   15+31+29+(28)
    // （四年一闰，百年不闰，四百年在间）
    // 用户输入两个数字
    // var year = prompt("请输入一个年份");
    // var month = prompt("请输入一个月份");
    // var day = parseInt(prompt("请输入一个日子"));
    // function leapyear(year) {
    //     //闰年：要么整百年份能够被400整除，要么非整百年份能被4整除（不能被100整除，且能被4整除）
    //     if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) {
    //         return true;
    //     }
    //     return false;
    // }
    // console.log(year + leapyear(year));
    // function getday(year, month, day, leapyear) {
    //     if (leapyear(year)) {
    //         var arrMonth = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    //         for (var i = 0; i < month - 1; i++) {
    //             day += arrMonth[i];
    //         }
    //     } else {
    //         var arrMonth = [31, 28, 31, 30, 31, 30, 31, 31, 38, 31, 30, 31];
    //         for (var i = 0; i < month - 1; i++) {
    //             day += arrMonth[i];
    //         }
    //     }
    //     return day;
    // }
    // console.log(getday(year, month, day, leapyear));


    // 100-999的水仙花数
    // i 的个位数*i的个位数*i的个位数+i 的十位数*i的十位数*i的十位数+i 的百位数*i的百位数*i的百位数
    // for (var i = 100; i <= 999; i++) {
    //     var g = i % 10; // 获取个位数
    //     var s = parseInt(i % 100 / 10); // 获取十位数
    //     var b = parseInt(i / 100); // 获取百位数
    //     if (g * g * g + s * s * s + b * b * b == i) {
    //         console.log(i);
    //     }
    // }

    //递归
    // var a = 1;
    // function fn(a) {
    //     console.log(a);
    //     a++
    //     if (a > 10) {
    //         return;
    //     }
    //     fn(a);
    // }
    // fn(a);


    // 递归求1---100的和
    // var n = 1;
    // function Fibonacci(n) {
    //     if (n == 1) {
    //         return 1;
    //     }
    //     return n + Fibonacci(n - 1);
    // }
    // console.log(Fibonacci(100));


    // 创建对象  对象: 键值对的形式 即 Key: Value
    // var obj = new Object();
    // obj.name = "张晓旭";
    // obj.age = "55";
    // obj.sex = "男";
    // obj.hobby = "女";
    // obj.say = function () {
    //     console.log(obj.name + "说:走,抽烟去啊?");
    // }
    // console.log("名字" + obj.name);
    // console.log("年龄" + obj.age);
    // console.log("性别" + obj.sex);
    // console.log("爱好" + obj.hobby);
    // obj.say();

    // 用{}形式创建
    // var obj = {
    //     name: "法拉利",
    //     color: "red",
    //     lun: 4,
    //     gang: 12
    // }
    // console.log(obj["name"]);
    // console.log(obj["color"]);

    // 构造函数
    // function Person(name, age, sex) {
    //     this.name = name;
    //     this.age = age;
    //     this.sex = sex;
    //     this.say = function () {
    //         console.log(this.name + "说：走抽烟去");
    //     }
    // }
    // p1 构造函数创建出来的实例对象
    // var p1 = new Person("张晓旭", 55, "男");
    // var p2 = new Person("李洪亮", 66, "男");
    // console.log(p1.name);
    // console.log(p1.age);
    // console.log(p1.sex);
    // p1.say();
    // console.log(p1);
    // console.log(p2);

    
    








</script>


</html>