正文24s开始
本视频介绍了为什么JS能用事件循环进行单线程并发编程,从阻塞、回调、异步入手，
讲解事件循环和webAPI位JS运行环境提供了什么机制来创造异步
视频来源：http://www.youtube.com/watch?v=8aGhZQkoFbQ&t=1s
原发布者：JSConf，演讲取自2014 JSConf EU 演讲者：Philip Roberts
翻译&字幕：@我一定要和气

What the heck is the event loop antway?
今天，我要讲讲JS中的事件循环到底是什么东西

我在&yet工作，我们单位主要做实时通信，如果有机会，请找我们合作

How does. JavaScript even work?
在我成为职业的JS开发者的时候，一个问题就开始在我脑中盘旋，JS到底是怎么运行的？我了解到了V8，大概知道了这是Chrome中的JS运行环境

What are you?
我还了解到了单线程、回调函数等知识，但是零散的了解不能让我对问题有更深入了解，所以我在网上进行了长时间的学习，我的研究过程从：“JavaScript，你到是什么？”开始

a single-theaded non-blocking asynchronous concurrent language.
I have a call stac, k an event loop. a callback queue some other apis and stuff. 
我得到的答案是：“JavaScript是一个单线程、非阻塞、异步并发的编程语言”，这明显不够有说服力。JavaScript中（也像其他语言一样）存在调用栈，JS运行环境还提供事件循环机制、（管理）回调函数的队列，以及宿主环境提供的API和其他一些内容，这明显也不够有说服力


Hey v8. do you have a call stack. an event loop. a callback queue some other apis and stuff.
I have a call stack and a heap. WTF are those other things?
因为我了解到V8是JS的一种运行环境，我去探寻V8中是否有调用栈、事件循环、回调函数队列等，在V8（而不是其他东西）中，我找到了C++对内存管理的封装，但是没有找到事件循环这些东西

18 Month......   I think I get this!
我对JavaScript的研究已经有18个月，到此为止，我认为，我也许了解的差不多了。
今天的演讲是要说说我对JS的理解。
如果你是新手，我觉得能帮助你理解JS，如果你是老手，我觉得也许能给你一些新的思路。

首先，如果你找到V8的代码库，在里面，你可能找不到setTimeout, DOM、XMLHttpRequest等内容。对，虽然JavaScript中，setTimeout如此常见，但是他不存在于V8之中。

开阔一下视野，除了V8这个运行环境之外，JS的宿主环境，也就是浏览器，还提供了WebAPI，DOM，ajax，计时器等功能由浏览器倾情提供。

（在浏览器环境中）浏览器还提供了事件循环和回调函数队列，他们的有机结合就是我随后的讲解重点。 

the call stack ==>  ↓
one thread  ==  one call stack  ==  one thing at a time 
先从调用栈开始。JS是单线程语言，一个线程里只有一个调用栈
单线程的意思就是，一次只能干一件事，具体什么意思？请看图
如左侧有三个函数定义，和一个函数调用，如果运行这段代码，请看右侧的调用栈
每次一个函数被调用，栈里就加入一个函数（帧），被调用的函数返回，栈里的函数就被推出栈
这种机制，能帮助计算机记录，代码运行的具体位置（比如正在执行什么函数？）
任何JS环境被开启，JS的栈中首先有main函数被执行，左侧代码中，printSquare（4）首先被推入栈。依次，square、muiltiply被推入栈，multiply运行到返回（return）之后，multiply首先被推出栈。square执行return后，被推出栈，随后console.log()被执行，最后printSquare返回，栈清空。

调用栈在开发中十分常见，比如报错信息就体现了函数调用栈。
可见，baz调用了bar， bar调用了foo，foo报错，注意最下面的匿名函数某种意义上就是main。
再说说栈溢出，比如一个函数自身调用自身，而没有退出条件。
如图，foo会一直被推入栈中而不被推出，会引发栈溢出。
栈溢出，浏览器可能会报错，希望以上介绍让你初步了解函数调用栈的概念

那么，阻塞的时候，栈是怎样的？
假设一个函数长时间在栈中存在，就会导致阻塞，console.log不会导致阻塞，1到100亿的循环操作则可能导致阻塞，类似的还有同步的网络请求、同步的图片处理等。

请看如图伪代码，假设getSync可以发起同步的网络请求，同步的代码运行，栈中的函数会在网络请求没有完毕之前一直存在。
在网络请求完毕后，栈清空，继续进行同步操作，情况类似，同步请求依次进行，随后foo、bar、qux依次被console.log()输出。

因为JavaScript是单线程执行，所以同步代码会可以占用栈。
那么栈被占用会导致什么问题？这就要回到浏览器中来继续说。
这是浏览器环境，让我在浏览器中（模拟演示）运行PPT中的代码，其中的同步网络请求实际上是用while循环模拟的，这样，同步请求大概会占用栈大概几秒种。
点击run运行这段代码，随后，用户与浏览器的交互被阻塞了，页面卡住了，什么都“点不了”，然后又卡了一段时间后，浏览器又“不卡了”，之前点击的Alert又弹出来给用户看.

所以，看上去，在运行同步代码的时候，栈会被占用，会导致浏览器的页面交互停止，这对页面应用开发是不被允许的。

那么，请问怎么处理，让阻塞不发生，让网络请求不会阻塞页面？其中一个处理方案是：异步回调函数。

回调函数就是回头被调用的函数，在JS领域，Node里和浏览器里都很常见回调函数被传入某个函数O，O运行完毕后，会回头调用传入的回调函数。
看图，如图代码先输入Hi，然后输出JSConfEU，然后呢？setTimeout向管理任务的队列中增加了一项任务，会被在将来执行，所以最后输入Three，用调用栈能解释吗？请看图。

现在，终于可以开始介绍事件循环和并发特性了，要知道，我一直在用简化的模型让你理解JS运行过程，但是这明显不是全部，JS应用明显能在一个时间做多个事情，但是这种功能不是JS运行环境提供的，因为JS不提供多线程编程接口，这种并发功能是由JS的宿主环境提供，比如，浏览器

看图，JS(在JS运行环境中)一次只能做一件事，浏览器提供的API，让JS应用有了并发编程的功能。在Node中，Node提供了类似的API来给JS提供并发环境。

请看图，栈和WebAPI的组合结果由这一段演示。
请注意，setTimeout执行的时候，我们传入了回调函数cb和延迟时间5000，
因为setTimeout由浏览器提供，所以WebAPI中会有计时器触发，在WebAPI中的timer执行的过程中，stack中的setTimeout被推出栈，继续执行JSConfEU一行，直到栈清空。
注意，timer在5S之后才会计时完毕。

但是WebAPI不会直接运行JS代码，否则可能出现JS代码运行的同时，“栈中动态地新增了一条不知何
处来的函数，这是不可行的”，这就需要任务队列/回调函数队列来帮忙。

请看，计时器计时完毕，WebAPI中的cb会被推入任务队列，终于讲到事件循环了，请看它起到了什么作用！

事件循环会先看看调用栈，再看看任务队列，如果栈是清空的，事件循环会从任务队列总抓取第一项cb，把cb推入调用栈。
因为现在栈是空的，cb就被推入调用栈。
随后cb被JS的运行环境执行，three被输出。

这就是JS中的异步的基础，我想继续把延迟时间变为0，以便你加深理解。
此处，延迟时间为0，但实际上并非同步执行setTimeout中包含的回调，而是告诉浏览器，请延迟执行传入的回调，直到调用栈清空后再执行该回调，只是延迟时间是0。

延迟为0，结果和延迟为5000是一致的，只是WebAPI中的计时时间会少一些。
虽然cb被更早地推入任务队列，但是事件循环只会在调用栈清空后才考虑执行任务队列中的回调。
所以结果不变。

所以setTimeout(cb, 0)就是延迟某个函数的运行。

WebAPI工作机制都一样，ajax也是。
发送请求的JS代码不会占用调用栈，而是在WebAPI中执行网络请求，JS代码没有被阻塞。
如果请求正常，在网络请求完毕后，cb被推入任务队列，事件循环保证cb被调用，且不影响JS代码正常执行。

没看明白？多看几次
继续，这个网站是我写的。
我用这个网站来论证我刚才阐述的理论的正确性，在运行JS的同时，可视化地演示JS是如何运行的。
名字叫Loupe，这里还没添加对XHR的演示，让我们先看看基本的异步操作的背后逻辑吧。

如图代码，点击运行，首先Started被输出。
随后两个WebAPI被调用，然后Done被输出，大概5S后，Timeout Finished被输出，而如果我点击ClickMe按钮，Clicked会被输出。
点击按钮的过程，WebAPI中的回调会被推入到任务队列中，如果点击很多次按钮，就有很多回调函数被推入到任务队列中。
再举个例子。
请看，这段代码中，WebAPI被调用四次，延迟时间是1000毫秒。
很明显Timeout函数被推入任务队列，队列中的回调函数被排队执行。
这说明一个问题，setTimeout不能精确确保延时时间，只能确保延迟。

继续看这个例子，这个例子重点在 回调函数。
回调可以是同步回调，或是异步回调，也就是同步执行，或者被延迟执行。
看这个forEach，它接受一个回调函数，回调函数会被同步执行，也就是会占用栈（如果耗时很长的话）。
当然，也可以改写一个异步的forEach，如图所示，使用setTimeout延迟。
请看运行演示，看上去，同步回调，会“占用”调用栈。
异步的forEach，cb从JS被传递进WebAPI，然后推入到任务队列，再被事件循环异步执行。
例子中的console.log()操作很快，所以看不出异步的好处，但是如果要执行的回调函数很慢，就能对比出异步非阻塞的好处！

我有一个自定义的delay函数，用于模拟耗时长的回调函数。
让我演示一下对比效果。
让我把：展示 浏览器渲染页面的操作 选项打开。
绿色块跳动一次，代表浏览器新增一个渲染页面的任务。
先说一点，浏览器的渲染过程可能是被JS运行所约束的。
比如，浏览器理论上希望16.67毫秒渲染一次页面，因为1秒60帧（60Hz屏幕）。
这是最理想的重绘速率。
但是，这个理想的值会被JS运行所约束。

比如，一种实现是：在调用栈中如果有代码在执行，渲染就不能被触发。
此时认为，render队列中的cb也和任务队列中的cb一样，需要栈清空才能被执行。
但是，render队列中的cb优先级比任务队列中的cb优先级高，每16.67秒，render队列中就被推入一个回调，留待调用栈清空，render队列中的回调会被更优先的被调用。

现在，这个绿色的块一直在跳动，因为调用栈一直是空的，所以渲染过程一直没有被阻塞。
但是，如果我是哦那个delay函数来模拟耗时长的同步回调函数，渲染回调就会被延迟，也就是页面和用户的交互停止了，“卡了”。

看下面的异步回调，虽然也是使用delay模拟耗时长的回调，但是因为是异步回调每个事件循环的间隔，栈都是清空的，所以渲染回调也能被执行。

这就说明了异步的回调在并发编程上的优越性，也说明了为什么开发者不应该阻塞事件循环。

如果在栈上进行耗时极长的操作，浏览器的渲染就会被阻塞，这不是我们所需要的。

所以就需要开发者开始考虑性能问题，比如图片处理、动画特效等类似的问题还有一个，对scroll事件的监听。
因为滚动事件的触发频率特别高。
如图代码中，如果不作处理，滚动事件发生的时候，就会有特别多的回调函数被推入到任务队列。
这样，如果对应的处理函数/回调也是属于耗费资源特别多的函数，就会阻塞调用栈/耗费大量资源。

这个例子说明了为什么我们在某些时候需要debounce来减少某种回调函数的调用次数。

以上就是基本的事件循环的介绍，这个话题的内容还有很多。
顺便说一句。
这个应用的基本思路是在每条语句之间插入一个耗时较长的循环来减慢代码的运行速度。
把正在运行的语句发送给WebWorker以获取运行时信息，并可视化给我们看。
虽然想要说的还是有很多，本次演讲就这样。













































































